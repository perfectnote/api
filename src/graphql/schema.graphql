type Query {
  helloworld: String
  """
  **Requires authentication.**

  Generates a secret and a QRCode so the user can enable TFA afterwards.
  Recommended flow is to call `mutation enableTFA` after this.
  """
  generateSecret: TFAPayload
  """
  **Requires authentication.**

  Fetches the backup codes for the current user.
  Returns null if TFA isn't enabled.
  """
  getBackupCodes: [BackupCode]
}

type Mutation {
  "Adds a user to the database with the provided data. The token returned is valid for 1 year."
  signup(
    "The email of the user. Must match the standard email format: `example@example.com`."
    email: String!
    """
    A password for the user.
    There's currently no limit of how many characters nor which characters are allowed.
    **However, that might change the the future.**
    """
    password: String!
    """
    The display name of the user.
    It should have the `<firstName> <lastName>` format, although it is not checked.

    This is diferent from the `username`, which is randomly generated based on the email and can also be changed later.
    """
    name: String!
  ): AuthPayload
  """
  Returns an authorization token which allows the user to access other endpoints.

  Depending if the user has TFA enabled, the returned token might have a diferent payload.
  Refer to `AuthPayload.token` for more information.

  If TFA is enabled, the client needs to call `mutation authorizeTFA` to get an authorized token.
  """
  login(
    "The email associated with the account."
    email: String!
    "The password to login into the account."
    password: String!
    """
    Whether the user has selected to remeber the account on the device.
    If `false` the token will be valid for 1 day. Otherwise, the token will be valid for a whole year.
    """
    remember: Boolean
  ): AuthPayload
  """
  **Requires an authorization token that is waiting for TFA authentication.**

  Using a one-time code or a backup code, this returns an AuthPayload with another token (see `AuthPayload.token`).
  The `AuthPayload.user` field returns `null`.

  If the authorization token included doesn't have `requireTFA: true` in the payload, an error is thrown.
  """
  authorizeTFA(
    "The 6-digit time generated token or a backup code if `backupCode` is `true`."
    token: String!
    "If `true`, the `token` field takes a backup code instead of a time generated token."
    backupCode: Boolean
  ): AuthPayload!
  """
  **Requires authentication.**

  Enables TFA for the current user or replaced the current secret with another one.

  It is recommended to get a `secret` from `query generateSecret`.
  """
  enableTFA(
    "The secret used to generate the time based tokens. Although not required, it should be requested from `query generateSecret`."
    secret: String!
    """
    The 6-digit time based token.
    Used to make sure the user has properly setup TFA.
    """
    token: String!
  ): [BackupCode!]!
  """
  **Requires authentication.**

  Disables TFA for the current user.
  """
  disableTFA(
    """
    The 6-digit time based token.
    Used to make sure it's the account owner disabling TFA and not someone who happened to be using the account.
    """
    token: String!
  ): ID!
}

type AuthPayload {
  """
  A [JWT token](https://jwt.io).

  The payload in the token depends on authentication state:
   * If the user has logged in and doesn't have TFA enable _OR_ if the user has entered the TFA token already, the payload has the following layout:
    ```json
      {
        "id": "5d4a9...",
        "name": "John Doe",
        "username": "john-doe-795b75"
      }
    ```
   * If the user has logged in but does have TFA enable, the `mutation login` endpoint will return the following layout:
    ```json
      {
        "id": "5d4a9...",
        "requiresTFA": true,
        "remember": true/false
      }
    ```
  """
  token: String
  "The user that is logged in."
  user: User
}

type User {
  "The ID of the user. This is randomly generated by the backend and cannot be changed."
  id: ID!
  """
  The display name of the user.
  It should have the `<firstName> <lastName>` format, although it can be any string.

  This is diferent from the `username`, which is randomly generated based on the email and can also be changed later.
  """
  name: String!
  "The email of the user. Matches the standard email format: `example@example.com`."
  email: String!
  """
  When an account is created, this is randomly generated based on the email (eg. `john.doe@gmail.com` might produce `john-doe-ff4153`).
  The last 6 digits of the username are generated based on the current timestamp to avoid duplicate usernames.

  This username can be changed later by the user.
  The username might be used later on for other features like public notebooks (eg. might be included in the URL).
  """
  username: String!
}

type TFAPayload {
  "The secret to enable TFA, encoded in base32."
  secret: String!
  "The data URI of the QRCode used to add the TFA account to Authy, Google Authenticator, etc. Encoded in base64."
  qrcode: String!
}

type BackupCode {
  "The code itself, which matches `[A-Z\\d]{8}`."
  code: String!
  "Returns `true` if the code has been used and can't be used again. Otherwise, returns `false`."
  used: Boolean!
}
